dnl Process this file with autoconf to produce a configure script.
AC_INIT()
AM_CONFIG_HEADER(mpeg4ip_config.h)

rm -f config.h >&/dev/null
touch config.h
dnl Detect the canonical host and target build environment
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE(mpeg4ip, 1.2)

dnl Checks for programs. 

dnl check for mac
SUN_LIBS=
have_macosx=false
case "$target" in
   *-apple-darwin*)
   have_macosx=true
   AC_DEFINE(HAVE_MACOSX, [1], [have mac])
   
   ;;
   *-*-solaris*)
     SUN_LIBS=-lstdc++
     ;;
   *)
   ;;
esac

if test $have_macosx = false; then
   AC_CONFIG_SUBDIRS(lib/SDLAudio)
fi
AM_CONDITIONAL(HAVE_MAC_OSX, $have_macosx)
AC_CONFIG_SUBDIRS(lib/rtp)

AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL
AC_MSG_CHECKING([libtool tag=C for nasm])
if test -z "`./libtool --help | grep \"\\-\\-tag\"`"; then
  AC_MSG_RESULT([no])
else
  LIBTOOL_C_TAG="--tag=CXX"
  AC_SUBST(LIBTOOL_C_TAG)
  AC_MSG_RESULT([yes])
fi 
AC_PROG_MAKE_SET
AC_PROG_CC
OBJC="???"
AC_SUBST(OBJC)
AC_PROG_CXX(c++)
AC_C_INLINE
AC_C_CONST
AC_PROG_INSTALL
AC_PATH_XTRA
AC_C_BIGENDIAN

AC_SUBST(ACLOCAL_AMFLAGS)

AS=gcc
AC_SUBST(AS)
ASFLAGS="$ASFLAGS"
AC_SUBST(ASFLAGS)
CCAS=gcc
AC_SUBST(CCAS)
CCASFLAGS="$ASFLAGS"
AC_SUBST(CCASFLAGS)

dnl Checks for libraries.

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_SIZEOF(long)
AC_LANG_PUSH(C++)
AC_CHECK_SIZEOF(bool)
AC_LANG_POP(C++)

AC_CHECK_HEADERS(fcntl.h unistd.h stdint.h inttypes.h getopt.h byteswap.h)
AC_CHECK_HEADERS(linux/cdrom.h sys/dvdio.h sys/time.h)

AC_LANG_PUSH(C++)
AC_CHECK_HEADER(id3/tag.h, [have_id3_tag=true], [have_id3_tag=false])
if test $have_id3_tag = true; then
   dnl should check for libraries here
   AC_DEFINE(HAVE_ID3_TAG_H, [1], [have id3/tag.h])
fi
AM_CONDITIONAL(HAVE_ID3_TAG, $have_id3_tag)
AC_LANG_POP(C++)

dnl Check for pre 1.0 API version of xvid
AC_ARG_ENABLE(xvid,
[  --disable-xvid         disable xvid link],
[ case "${enableval}" in
  no)  disable_xvid=yes ;;
  yes) disable_xvid=no ;;
  *) AC_MSG_ERROR([bad valud ${enableval} for --disable-xvid]) ;;
esac],
  [disable_xvid=no])

if test x$disable_xvid = xyes; then
  use_xvid10=false
  no_xvid=true
else
AC_MSG_CHECKING([for xvid.h, API version 3])
AC_TRY_COMPILE([],
	[#include <xvid.h>
	 int ix = API_VERSION;],
	 [no_xvid=false],
	 [no_xvid=true])
use_xvid10=false
if test $no_xvid = false; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_XVID_H, [1], [have xvid.h])
else
   AC_MSG_RESULT(no)
   AC_CHECK_HEADER(xvid.h, [no_xvid=false], [noxvid=true])
   if test $no_xvid = false; then
      use_xvid10=true
      AC_DEFINE(HAVE_XVID10, [1], [have xvid.h with 1.0 API])
   fi
fi
fi
AM_CONDITIONAL(HAVE_XVID_1_0, $use_xvid10)
AM_CONDITIONAL(NO_XVID, $no_xvid)

dnl check for Sun, BSD/OS libraries
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(gnugetopt, getopt_long)
AC_SEARCH_LIBS(inet_addr, nsl)
AC_SEARCH_LIBS(inet_aton, reslov)
AC_SEARCH_LIBS(dlopen, dl libc)

dnl check for this for mp3lame
saved_LIBS="$LIBS"
LIBS="$LIBS -lm"
AC_CHECK_LIB(a52, 
             a52_syncinfo, 
	     [have_a52=true],
             [have_a52=false])
AM_CONDITIONAL(HAVE_A52DEC_LIB, $have_a52)
have_mpeg2=true
AC_CHECK_LIB(mpeg2,
	     mpeg2_init,
	     [have_mpeg2=true],
	     [have_mpeg2=false])
if test x$have_mpeg2 = xtrue; then
   AC_MSG_CHECKING([libmpeg2 version])
   AC_COMPILE_IFELSE([#include <stdint.h>
#include <mpeg2dec/mpeg2.h>

#ifndef MPEG2_VERSION
#error no mpeg2 version
#else
#if MPEG2_VERSION(0, 4, 0) <= MPEG2_RELEASE
int main (int argc, char **argv)
{
  return 0;
}
#else
#error prior release
#endif
#endif
],
	[have_mpeg2=true],
	[have_mpeg2=false])
   if test x$have_mpeg2 = xtrue; then
      AC_MSG_RESULT([yes])
   else
      AC_MSG_RESULT([no])
   fi
fi

AM_CONDITIONAL(HAVE_LIBMPEG2, $have_mpeg2)
if test $have_mpeg2 = true; then
   AC_DEFINE(HAVE_LIBMPEG2, [1], [have libmpeg2 decoder library])
fi
LIBS=$saved_LIBS

dnl Checks for typedefs, structures, and compiler characteristics.

dnl Checks for library functions.
AC_CHECK_FUNCS(strerror strcasestr poll getopt getopt_long getopt_long_only getrusage socketpair strsep inet_ntoa)


AC_CHECK_TYPES([in_port_t, socklen_t], , , 
	[#include <sys/types.h>
	 #include <sys/socket.h>
	 #include <netinet/in.h>])
AC_CHECK_TYPES([struct ip_mreq_source],
	       AC_DEFINE(HAVE_IGMP_V3, [1], [IGMPv3 definition]),
,
	[#include <netinet/in.h>])

AC_CHECK_MEMBERS(fpos_t.__pos,,, [#include <stdio.h>])

dnl borrowed from ac-archive.sourceforge.net
dnl @author  Guido Draheim <guidod@gmx.de>
dnl heavilly modified
AC_DEFUN([MY_CHECK_CC_OPT],
[
save_CFLAG="$CFLAGS"
save_CXXFLAG="$CXXFLAGS"
CFLAGS="$CFLAGS -Werror $1"
CXXFLAGS="$CXXFLAGS -Werror $1"
   AC_MSG_CHECKING([whether $3 accepts $1])
   AC_COMPILE_IFELSE(
[extern void f(void); void f(void){}],
[$2=yes
 AC_MSG_RESULT([yes])],
[$2=no
 AC_MSG_RESULT([no])])
CFLAGS="$save_CFLAG"
CXXFLAGS="$save_CXXFLAG"
])

AC_DEFUN([MY_CHECK_CC_OPT_SET],
[
   MY_CHECK_CC_OPT($1, mpeg4ip_ok, $3)
   if test $mpeg4ip_ok = yes; then
     $2="$$2 $1"
   fi
])

AC_DEFUN([MY_CHECK_CC_OPT_F_OR_M],
[
  temp_val=-m$1
  MY_CHECK_CC_OPT($temp_val,mpeg4ip_ok, [c compiler])
  if test $mpeg4ip_ok = yes; then
     AC_SUBST($2, $temp_val)
     AM_CONDITIONAL(HAVE_$2, true)
  else
     temp_val=-f$1
     MY_CHECK_CC_OPT($temp_val, mpeg4ip_ok, [c compiler])
     if test $mpeg4ip_ok = yes; then
        AC_SUBST($2, $temp_val)
     AM_CONDITIONAL(HAVE_$2, true)
     else
        temp_val=
        AC_SUBST($2, $temp_val)
     AM_CONDITIONAL(HAVE_$2, false)
     fi
  fi
])


dnl Allow server build to be disabled
AC_ARG_ENABLE(server, 
[  --enable-server        enable server build],
[ case "${enableval}" in
  yes) server=true ;;
  no)  server=false ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --enable-server) ;;
esac],
[server=true])
AM_CONDITIONAL(SERVER, test $server = true)

dnl Allow player build to be disabled
AC_ARG_ENABLE(player, 
[  --enable-player        enable player build],
[ case "${enableval}" in
  yes) player=true ;;
  no)  player=false ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --enable-player) ;;
esac],
[player=true])
AM_CONDITIONAL(PLAYER, test $player = true)

AC_ARG_ENABLE(ismacryp,
[  --enable-ismacryp      enable build of ismacryp ],, enable_ismacryp=no)

ISMACRYPLIB="\$(top_builddir)/lib/ismacryp/libismacryp.la"
AC_ARG_ENABLE(aesicm,
[  --enable-aesicm    enable aes icm [default=no] ],, enable_aesicm=no)

if test x$enable_aesicm != xno; then
   AESICMLIB="$enable_aesicm/libaesicm.a"
   AESICM_INC="-I$enable_aesicm/include"
   ISMACRYP_FLAGS=""
   AC_MSG_NOTICE([aesicm - directory : ${enable_aesicm}])
else
  AESICMLIB=""
  AESICM_INC=""
  ISMACRYP_FLAGS="AM_CFLAGS = -DNULL_ISMACRYP"
  AC_MSG_NOTICE([aesicm - no directory specified])
fi
ISMACRYP_LIB="$ISMACRYPLIB $AESICMLIB"
ISMACRYP_INC="-I\$(top_builddir)/lib/ismacryp"
AC_SUBST(ISMACRYP_LIB)
AC_SUBST(ISMACRYP_INC)
AC_SUBST(ISMACRYP_FLAGS)
AC_SUBST(AESICM_INC)
AC_MSG_NOTICE([aesicm - AESICMLIB      : $AESICMLIB])
AC_MSG_NOTICE([aesicm - AESICM_INC     : $AESICM_INC])
AC_MSG_NOTICE([aesicm - ISMACRYPLIB    : $ISMACRYPLIB])
AC_MSG_NOTICE([aesicm - ISMACRYP_LIB   : $ISMACRYP_LIB])
AC_MSG_NOTICE([aesicm - ISMACRYP_INC   : $ISMACRYP_INC])
AC_MSG_NOTICE([aesicm - ISMACRYP_FLAGS : $ISMACRYP_FLAGS])

AC_ARG_ENABLE(mp4live,
              [  --enable-mp4live       enable mp4live build on Linux [default=yes]],
              , enable_mp4live=yes)

have_mp4live=false
have_v4l2=false
if test x$enable_mp4live = xyes; then
   case "$target" in
   *-*-linux*)
	have_mp4live=true
	AC_ARG_ENABLE(v4l2,
	              [  --disable-v4l2         disable V4L2 interface],
		      [ case "${enableval}" in
		        no)  disable_v4l2=yes ;;
			yes) disable_v4l2=no ;;
			 *) AC_MSG_ERROR(bad value ${enableval} for --disable-v4l2) ;;
			 esac],
		      [disable_v4l2=no])
        if test x$disable_v4l2 = xno; then
	  AC_CHECK_TYPE([struct v4l2_buffer], 
                        [have_v4l2=true],
	                [have_v4l2=false],
		        [#include <sys/time.h>
#include <linux/videodev.h>])

        else
            have_v4l2=false
        fi
	;;
    *)
	;;
   esac
fi

AM_CONDITIONAL(MP4LIVE, [test x$have_mp4live = xtrue])
AM_CONDITIONAL(HAVE_V4L2, [test x$have_v4l2 = xtrue])
LIBVORBIS_LIB=
if test x$have_mp4live = xtrue; then
   AC_CHECK_LIB(vorbis, vorbis_bitrate_init, [have_vorbis=true], [have_vorbis=false])
   if test x$have_vorbis = xtrue; then
      LIBVORBIS_LIB="-lvorbis -lvorbisenc"
      AC_CHECK_HEADER([faad.h], [LIBVORBIS_LIB="$LIBVORBIS_LIB -lfaad"])
   fi
fi
AC_SUBST(LIBVORBIS_LIB)

if test x$have_v4l2 = xtrue; then
  AC_DEFINE(HAVE_LINUX_VIDEODEV2_H, 1, [Define to 1 if you have the <linux/videodev2.h> header file.])
fi

dnl test for ffmpeg
have_ffmpeg=false
FFMPEG_INC=
FFMPEG_LIB=
AC_ARG_ENABLE(ffmpeg,
	       [  --enable-ffmpeg=<directory>  enable ffmpeg for mp4live, and specify ffmpeg home directory],
	       [have_ffmpeg_arg=true],
	       [have_ffmpeg_arg=false])

if test x$have_ffmpeg_arg = xtrue; then
   AC_MSG_NOTICE([have enable ffmpeg $enable_ffmpeg])
   FFMPEG_INC=-I${enable_ffmpeg}/libavcodec
   FFMPEG_LIB="${enable_ffmpeg}/libavcodec/libavcodec.a -lz"
   saveCFLAGS="$CFLAGS"
   CFLAGS="$CFLAGS $FFMPEG_INC"
   AC_CHECK_TYPES([AVRational], , , [#include <avcodec.h>])
   CFLAGS=$saveCFLAGS
   have_ffmpeg=true
   AC_DEFINE(HAVE_FFMPEG, 1, [enable ffmpeg for mp4live])
else
   saved_LIBS="$LIBS"
   LIBS="$LIBS -lm -lz"
   AC_CHECK_LIB(avcodec, avcodec_init, [have_ffmpeg=true], [have_ffmpeg=false])
   LIBS=$saved_LIBS
   if test x$have_ffmpeg = xtrue; then
      AC_DEFINE(HAVE_FFMPEG_INSTALLED, 1, [defined if ffmpeg is installed])
      FFMPEG_INC=
      FFMPEG_LIB="-lavcodec -lz"
      AC_CHECK_TYPES([AVRational], , , [#include <ffmpeg/avcodec.h>])
      AC_DEFINE(HAVE_FFMPEG, 1, [enable ffmpeg for mp4live])
   fi
fi
AC_SUBST(FFMPEG_INC)
AC_SUBST(FFMPEG_LIB)
AM_CONDITIONAL(HAVE_FFMPEG, [test x$have_ffmpeg = xtrue])

AC_ARG_ENABLE(ipv6,
[  --enable-ipv6          enable IPv6],
              enable_ipv6=yes)

if test x$enable_ipv6 = xyes; then
   AC_DEFINE(HAVE_IPv6, 1, [enable IPv6 architecture])
fi


AC_ARG_ENABLE(ppc,
              [  --enable-ppc           use PPC assembly on ppc [default=yes]],
              , 
	      enable_ppc=yes)

test_use_ppc=false
if test x$enable_ppc = xyes; then
   case $target in
   *powerpc*) 
	AC_DEFINE(ARCH_PPC, 1, [Power PC Architecture])
	test_use_ppc=true
	;;
   esac
fi
AM_CONDITIONAL(USE_PPC, test x$test_use_ppc = xtrue)

dnl read out glib and gtk paths and flags.  Will need to dummy this
dnl out for a glibless system
AC_ARG_ENABLE(gtk-glib,
[  --disable-gtk-glib       disable gtk check],
[ case "${enableval}" in
  no) disable_gtk_glib=yes ;;
  yes)  disable_gtk_glib=no ;;
  *) AC_MSG_ERROR([bad valud ${enableval} for --disable-gtk-glib]) ;;
esac],
  [disable_gtk_glib=no])

glib_gtk=no
if test x$disable_gtk_glib = xno; then
  AM_PATH_GLIB_2_0(, [haveglib20=yes], [haveglib20=no])
  if test x$haveglib20 = xyes; then 
   AM_PATH_GTK_2_0(, [havegtk20=yes], [havegtk20=no])
   if test x$havegtk20 = xyes; then 
      AC_DEFINE(HAVE_GTK_2_0, 1, [Have GTK 2.0 on system])
      AC_DEFINE(HAVE_GTK, 1, [Have GTK on system])
      glib_gtk=yes
   else
      haveglib20=no
   fi
  fi
  if test x$haveglib20 = xno; then 
   AM_PATH_GLIB(, [glib_gtk=yes], [glib_gtk=no])
   if test x$glib_gtk = xyes; then
      AM_PATH_GTK(, [glib_gtk=yes], [glib_gtk=no])
      AC_DEFINE(HAVE_GTK, 1, [Have GTK on system])
   fi
  fi

  dnl If we're going to check for GLIB, we most likely need the real path
  dnl we need to save off the CFLAGS and CPPFLAGS for the AC_CHECK_HEADER
  dnl command 
  save_CFLAG="$CFLAGS"
  save_CPPFLAG="$CPPFLAGS"
  CFLAGS="$CFLAGS $GLIB_CFLAGS"
  CPPFLAGS="$CPPFLAGS $GLIB_CFLAGS"
  AC_CHECK_HEADERS(glib.h)
  CFLAGS="$save_CFLAG"
  CPPFLAGS="$save_CPPFLAG"
fi
AM_CONDITIONAL(NO_GLIB_GTK, test x$glib_gtk = xno)

AC_ARG_ENABLE(mmx,
              [  --enable-mmx           use MMX assembly on x86 [default=yes]],
              , 
	      enable_mmx=yes)

test_use_mmx=false
if test x$enable_mmx = xyes; then
   AC_CHECK_PROG(USENASM, nasm, true, false)

   if test x$USENASM = xtrue; then
	AC_MSG_CHECKING(nasm version...)
	BILLSNASM_arg=`nasm -r | tr '.' ' '`
        BILLSNASM_ret=`util/testnasm.sh $BILLSNASM_arg`
	if test x$BILLSNASM_ret = x"yes"; then
	   USENASM=true
	   AC_MSG_RESULT(valid)
        else
           USENASM=false
           AC_MSG_RESULT(invalid)
	   AC_MSG_WARN(Installed version of NASM is incorrect; please update to 0.98.19 or greater)
        fi
   fi
   if test x$USENASM = xtrue; then
        AC_PATH_PROG(NASM, nasm)
	case $target in
	i?86*)
		CFLAGS="$CFLAGS -DUSE_MMX"
		CXXFLAGS="$CXXFLAGS -DUSE_MMX"
		case $ARCH in
		win32)
		  NASMFLAGS="-f win32"
		  ;;
		*)
		  NASMFLAGS="-f elf"
		  ;;
		esac
		AC_SUBST(NASMFLAGS)
		test_use_mmx=true
		arch_x86=:
		AC_DEFINE(ARCH_X86, 1, [have intel processor])
		;;
	esac
    fi
fi
AM_CONDITIONAL(USE_MMX, test x$test_use_mmx = xtrue)

dnl Get SDL cflags and SDL libraries to include
SDL_LIBS="`sdl-config --libs`"
AC_SUBST(SDL_LIBS)
SDL_LIB_LIBS="`sdl-config --libs | sed /-lSDLmain/s///`"
AC_SUBST(SDL_LIB_LIBS)

AC_SUBST(SUN_LIBS)

dnl
BILLS_CWARNINGS="-Wall -Werror"

AM_CONDITIONAL(HAVE_ALIGN_LOOPS, false)
MY_CHECK_CC_OPT_F_OR_M(align-loops, ALIGN_LOOPS)
AM_CONDITIONAL(HAVE_ALIGN_FUNCS, false)
MY_CHECK_CC_OPT_F_OR_M(align-functions, ALIGN_FUNCS)
AM_CONDITIONAL(HAVE_ALIGN_JUMPS, false)
MY_CHECK_CC_OPT_F_OR_M(align-jumps, ALIGN_JUMPS)

MY_CHECK_CC_OPT_SET([-Wmissing-prototypes], BILLS_CWARNINGS, [c compiler])
MY_CHECK_CC_OPT_SET([-Wmissing-declarations], BILLS_CWARNINGS, [c compiler])
MY_CHECK_CC_OPT_SET([-Wno-char-subscripts], BILLS_CWARNINGS, [c compiler])
MY_CHECK_CC_OPT_SET([-Wno-unknown-pragmas],BILLS_CWARNINGS, [c compiler])
MY_CHECK_CC_OPT_SET([-Wformat=2],BILLS_CWARNINGS, [c compiler])
BILLS_CPPWARNINGS="-Wall -Werror"
AC_LANG_PUSH(C++)
MY_CHECK_CC_OPT_SET([-Wmissing-prototypes], BILLS_CPPWARNINGS,[c++ compiler])
MY_CHECK_CC_OPT_SET([-Wno-char-subscripts], BILLS_CPPWARNINGS,[c++ compiler])
MY_CHECK_CC_OPT_SET([-Woverloaded-virtual], BILLS_CPPWARNINGS,[c++ compiler])
MY_CHECK_CC_OPT_SET([-Wno-unknown-pragmas], BILLS_CPPWARNINGS,[c++ compiler])
MY_CHECK_CC_OPT_SET([-Wno-deprecated], BILLS_CPPWARNINGS,[c++ compiler])
MY_CHECK_CC_OPT_SET([-Wformat=2], BILLS_CPPWARNINGS,[c++ compiler])
AC_LANG_POP(C++)
AC_SUBST(BILLS_CWARNINGS)
AC_SUBST(BILLS_CPPWARNINGS)

PLAYER_PLUGIN_DIR=$libdir/mp4player_plugin
AC_SUBST(PLAYER_PLUGIN_DIR)

SDL_CFLAGS=`sdl-config --cflags`
CFLAGS="$CFLAGS -DMPEG4IP $SDL_CFLAGS"
AC_SUBST(CFLAGS)
CXXFLAGS="$CXXFLAGS -DMPEG4IP $SDL_CFLAGS"
AC_SUBST(CXXFLAGS)

dnl Now output the Makefile's
AC_OUTPUT( \
	Makefile \
	common/Makefile \
	common/video/Makefile \
	common/video/mpeg4-2000/Makefile \
	common/video/mpeg4-2000/app/Makefile \
	common/video/mpeg4-2000/app/convertpar/Makefile \
	common/video/mpeg4-2000/app/decoder/Makefile \
	common/video/mpeg4-2000/app/encoder/Makefile \
	common/video/mpeg4-2000/idct/Makefile \
	common/video/mpeg4-2000/sys/Makefile \
	common/video/mpeg4-2000/sys/decoder/Makefile \
	common/video/mpeg4-2000/sys/encoder/Makefile \
	common/video/mpeg4-2000/tools/Makefile \
	common/video/mpeg4-2000/tools/entropy/Makefile \
	common/video/mpeg4-2000/tools/sadct/Makefile \
	common/video/mpeg4-2000/type/Makefile \
	common/video/mpeg4-2000/vtc/Makefile \
	common/video/mpeg4-2000/vtc/include/Makefile \
	common/video/mpeg4-2000/vtc/main/Makefile \
	common/video/mpeg4-2000/vtc/pezw/Makefile \
	common/video/mpeg4-2000/vtc/shape/Makefile \
	common/video/mpeg4-2000/vtc/wavelet/Makefile \
	common/video/mpeg4-2000/vtc/zte/Makefile \
	common/video/mpeg4-2000/vtc/ztq/Makefile \
	doc/Makefile \
	doc/ietf/Makefile \
	doc/mcast/Makefile \
	doc/programs/Makefile \
	doc/mp4v2/Makefile \
	include/Makefile \
	lib/Makefile \
	lib/audio/Makefile \
	lib/avi/Makefile \
	lib/bitstream/Makefile \
	lib/fposrec/Makefile \
	lib/gnu/Makefile \
	lib/mp4/Makefile \
        lib/ismacryp/Makefile \
	lib/mp4/doc/Makefile \
	lib/mp4v2/Makefile \
	lib/mp4v2/test/Makefile \
	lib/mp4v2/util/Makefile \
	lib/mp4av/Makefile \
	lib/mpeg2ps/Makefile \
	lib/mpeg2t/Makefile \
	lib/msg_queue/Makefile \
	lib/sdp/Makefile \
	lib/utils/Makefile \
	server/Makefile \
	server/video/Makefile \
	server/mp4live/Makefile \
	server/mp4live/gui/Makefile \
	server/mp4live/h261/Makefile \
	server/mp4creator/Makefile \
	server/util/Makefile \
	server/util/mp4encode/Makefile \
	server/util/avi2raw/Makefile \
	server/util/avidump/Makefile \
	server/util/rgb2yuv/Makefile \
	server/util/lboxcrop/Makefile \
	player/Makefile \
	player/lib/Makefile \
	player/lib/libhttp/Makefile \
	player/lib/rtsp/Makefile \
	player/lib/audio/Makefile \
	player/lib/audio/celp/Makefile \
	player/lib/audio/celp/BS/Makefile \
	player/lib/audio/celp/dec/Makefile \
	player/lib/audio/celp/include/Makefile \
	player/lib/audio/faad/Makefile \
	player/lib/audio/mp3/Makefile \
	player/lib/audio/mp3util/Makefile \
	player/lib/audio/portaudio/Makefile \
	player/lib/mp4util/Makefile \
	player/plugin/Makefile \
	player/plugin/audio/Makefile \
	player/plugin/audio/a52dec/Makefile \
	player/plugin/audio/celp/Makefile \
	player/plugin/audio/ffmpeg/Makefile \
	player/plugin/audio/raw/Makefile \
	player/plugin/rtp/Makefile \
	player/plugin/rtp/h261/Makefile \
	player/plugin/rtp/h264/Makefile \
	player/plugin/rtp/isma_audio/Makefile \
        player/plugin/rtp/isma_video/Makefile \
        player/plugin/rtp/rfc2429/Makefile \
	player/plugin/rtp/rfc3267/Makefile \
	player/plugin/video/Makefile \
	player/plugin/video/ffmpeg/Makefile \
	player/plugin/video/h261/Makefile \
	player/plugin/video/mpeg2dec/Makefile \
	player/plugin/video/raw/Makefile \
	player/plugin/video/xvid/Makefile \
	player/src/Makefile \
	player/src/codec/Makefile \
	player/src/codec/aa/Makefile \
	player/src/codec/mp3/Makefile \
	player/src/codec/mpeg4/Makefile \
	player/src/codec/wav/Makefile \
	player/src/osx/Makefile \
	player/src/osx/English.lproj/Makefile \
	player/src/osx/SDLMain.nib/Makefile \
	player/src/win_client/Makefile \
	player/src/win_common/Makefile \
	player/src/win_gui/Makefile \
	player/src/win_gui/hlp/Makefile \
	player/src/win_gui/res/Makefile \
	util/Makefile \
	util/h264/Makefile \
	util/iptv/Makefile \
	util/mpeg2/Makefile \
	util/mpeg4vol/Makefile \
	util/yuv/Makefile \
	mpeg4ip-config
)
